question;answer
"What is Legal Engine Search (LES)?";"LES is a semantic search engine designed for efficient retrieval of Spanish case law, combining sparse and dense retrieval methods."
"What retrieval methods does LES support?";"LES integrates traditional sparse retrieval (BM25) for initial search and dense embedding models (RoBERTa-BNE, Sentence Transformers, ColBERT) for reranking."
"Why was LES developed?";"LES addresses the limitations of exact term–matching in legal search by capturing semantic relationships, synonyms, and contextual nuances in Spanish jurisprudence."
"How does LES evaluate relevance?";"LES uses a novel consensus-based evaluation methodology, aggregating relevance scores from multiple Large Language Models and manual expert review."
"What is the role of dense embeddings in LES?";"Dense embeddings represent legal documents as numerical vectors, enabling semantic similarity comparisons beyond literal word matching."
"What data does LES process?";"LES processes a corpus of Spanish judicial decisions from CENDOJ, extracting text and metadata from PDFs and segmenting documents hierarchically."
"What metrics are used to measure LES performance?";"LES performance is measured with standard IR metrics: Precision@k, Mean Reciprocal Rank (MRR), and Normalized Discounted Cumulative Gain (NDCG)."
"How does LES handle model training and fine-tuning?";"LES recommends future work on fine-tuning Sentence Transformers with triplet contrastive learning on a labeled legal dataset to improve semantic similarity."
"What infrastructure does LES use?";"LES uses Elasticsearch with BM25 and its native dense vector search capabilities, plus tokenization and embedding via the Transformers and Sentence Transformers libraries."
"Where can I access the LES whitepaper and code?";"The LES whitepaper and code are available in the author’s website on Python-Lair (https://python-lair.space) and university archives."
"How does LES ingest documents?";"LES ingests documents by extracting text and metadata from PDFs using pdfplumber, then cleans and segments them into paragraphs for indexing."
"Can LES support languages other than Spanish?";"By default LES is optimized for Spanish, but it can be extended to other languages with appropriate model fine-tuning and analyzer configurations."
"Which embedding models can be used with LES?";"LES supports any dense embedding model, including RoBERTa-Lex, RoBERTa-BNE, Sentence-BERT, ColBERT, or custom‐fine-tuned encoders."
"How do I run the index building script?";"Execute python scripts/build_index.py after setting settings.sqlite_url, settings.retrieval_mode, and other environment variables as needed."
"Does LES support incremental indexing?";"Yes—by modifying the build script to detect and index only new or updated documents, you can avoid full re-indexation."
"How are queries processed in LES?";"LES computes an embedding for the query, then performs sparse (BM25), dense, or hybrid search based on the configured retrieval mode."
"What is the default retrieval mode in LES?";"The default is sparse retrieval (BM25) for initial search, with optional dense reranking if retrieval_mode is set to “hybrid” or “dense.”"
"How can I configure the number of top documents to retrieve?";"You can pass the k parameter in the API request body or set it in the UI to control how many documents are returned."
"How does LES switch between sparse and dense retrieval?";"LES reads settings.retrieval_mode and attempts dense first; if artifacts (index or id_map) are missing, it logs a warning and falls back to sparse."
"Is streaming response supported by the LES API?";"Yes—if your client implements Server-Sent Events and the backend is configured for streaming, LES can stream partial answers as they generate."
"How are source IDs returned to the client?";"LES includes a source_ids array in its JSON response so clients can display or link back to the original document paragraphs."
"Can I customize the text preprocessing steps in LES?";"Absolutely—LES’s preprocessing pipeline is modular, letting you adjust regex cleaning, tokenization, and section-level segmentation."
"How do I add new metadata fields to the index?";"Update the Elasticsearch mapping in your config (e.g., index_mappings.json), then rerun the build script to reindex with the new fields."
"What logging features does LES include?";"LES uses Python’s logging to emit info for schema creation, warnings for fallback events, and debug messages for generator selection."
"How do I handle missing environment variables?";"If neither OPENAI_API_KEY nor Ollama is configured, LES raises a RuntimeError asking you to set the missing credentials or service."
"How are tests organized in LES?";"Unit tests cover build_index, dependencies, and adapters under tests/unit; integration tests for /api/ask live in tests/integration."
"Which CI tools are compatible with LES?";"LES works seamlessly with GitHub Actions, GitLab CI, or any CI that can run pytest and linting on push or pull‐request events."
"What license governs LES?";"LES is released under the MIT License, permitting free use, modification, and distribution with attribution."
"How can I contribute to LES development?";"Contributions are welcome—open issues or pull requests on the GitHub repo to improve code, tests, or documentation."
"Where can I report bugs or get support?";"For support and bug reports, please open an issue on the project’s GitHub page or join the repository’s discussion forum."