name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # ---------- venv cachÃ© ----------
      - name: Cache virtualenv
        id: cache-venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}

      - name: Create virtualenv (first run only)
        if: steps.cache-venv.outputs.cache-hit != 'true'
        run: python -m venv .venv
        

      - name: Install dependencies from pyproject.toml
        run: |
          . .venv/bin/activate
          python -m pip install --upgrade pip
          # instala paquete + extras dev definidos en [project.optional-dependencies].dev
          pip install -e ".[dev]"
          # --- extra: si mantienes un requirements.txt suelto, descomenta:
          # pip install -r requirements.txt

      # Exportamos ruta del venv al resto de pasos
      - name: Export VIRTUAL_ENV
        run: |
          echo "VIRTUAL_ENV=$GITHUB_WORKSPACE/.venv" >> $GITHUB_ENV
          echo "$GITHUB_WORKSPACE/.venv/bin" >> $GITHUB_PATH

      - name: Run unit & integration tests with coverage
        run: pytest --cov=src --cov-report=term-missing

  # ---------- build de la imagen (opcional) ----------
  docker-build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & cache image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false               # cambia a true si vas a publicar
          tags: local-rag-backend:ci
          cache-from: type=gha      # aprovecha cache previa
          cache-to:   type=gha,mode=max
